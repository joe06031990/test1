pipeline {
    agent any

    environment {
        GRAFANA_API_KEY    = credentials('GRAFANA_API_KEY')
        GRAFANA_URL        = "https://jstest2025.grafana.net"
        GRAFANA_BACKUP_DIR = "playground_nonprd/Playground"
    }

    stages {
        stage('Checkout Git Repository') {
            steps {
                checkout scm
            }
        }

        stage('Confirm Restore') {
            steps {
                script {
                    input message: "⚠️ This will overwrite dashboards in Grafana Playground. Continue?"
                }
            }
        }

        stage('Restore Grafana Dashboards') {
            steps {
                dir(env.WORKSPACE) {
                    script {
                        def grafanaRestoreScript = '''#!/bin/bash
                        set -e
                        set -x

                        CURL_CMD="/usr/bin/curl"

                        echo "Starting Grafana dashboard restore from ${GRAFANA_BACKUP_DIR} to ${GRAFANA_URL}"

                        restore_dashboard() {
                            local filepath="$1"
                            local folder_name="$2"

                            local dashboard_json=$(jq '.dashboard' "$filepath")

                            if [ -z "$dashboard_json" ] || [ "$dashboard_json" = "null" ]; then
                                echo "Skipping invalid JSON: $filepath"
                                return
                            fi

                            local folderId=0
                            if [ -n "$folder_name" ]; then
                                folderId=$(${CURL_CMD} -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
                                    "${GRAFANA_URL}/api/folders" | jq ".[] | select(.title==\\"$folder_name\\") | .id")

                                if [ -z "$folderId" ]; then
                                    echo "Creating folder: $folder_name"
                                    folderId=$(${CURL_CMD} -s -X POST -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
                                        -H "Content-Type: application/json" \
                                        -d "{\\"title\\": \\"$folder_name\\"}" \
                                        "${GRAFANA_URL}/api/folders" | jq '.id')
                                fi
                            fi

                            ${CURL_CMD} -s -X POST -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
                                -H "Content-Type: application/json" \
                                -d "{
                                    \\"dashboard\\": $dashboard_json,
                                    \\"folderId\\": $folderId,
                                    \\"overwrite\\": true
                                }" \
                                "${GRAFANA_URL}/api/dashboards/db"

                            echo "Restored: $filepath -> folder $folder_name"
                        }

                        # Walk repo tree and restore each dashboard
                        find "${GRAFANA_BACKUP_DIR}" -type f -name '*.json' | while read file; do
                            rel_path=$(realpath --relative-to="${GRAFANA_BACKUP_DIR}" "$file")
                            folder_name=$(dirname "$rel_path")

                            # root dashboards (directly under Playground/)
                            if [ "$folder_name" = "." ]; then
                                folder_name="Playground"
                            fi

                            restore_dashboard "$file" "$folder_name"
                        done

                        echo "Restore complete."
                        '''

                        writeFile(file: 'restore_grafana.sh', text: grafanaRestoreScript)
                        sh 'chmod +x restore_grafana.sh'
                        sh './restore_grafana.sh'
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
