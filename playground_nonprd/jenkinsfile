// Defines the start of a declarative Jenkins pipeline for restoring Grafana dashboards.
// WARNING: This pipeline runs automatically and will overwrite dashboards without confirmation.
pipeline {
    // Specifies that the pipeline can run on any available Jenkins agent.
    agent any

    // This pipeline is now configured to run automatically on a schedule.
    triggers {
        // 'H * * * *' means the job will run approximately every hour.
        cron('H * * * *')
    }

    // Defines environment variables that will be available throughout the pipeline.
    environment {
        // Securely loads the Grafana API key from Jenkins credentials.
        GRAFANA_API_KEY = credentials('GRAFANA_API_KEY')
        // The URL of your Grafana instance.
        GRAFANA_URL = "https://jstest2025.grafana.net"
        // The name of the root directory where backups are stored in the Git repository.
        GRAFANA_BACKUP_DIR = "playground_nonprd"
    }

    // Contains all the main work stages of the pipeline.
    stages {
        // The first stage: responsible for checking out code from your Git repository.
        stage('Checkout Git Repository') {
            steps {
                // The 'checkout' step clones or updates the specified Git repository and branch.
                // Uses 'scm' to automatically checkout the branch that triggered this build
                checkout scm
            }
        }

        // This stage runs the restore script.
        stage('Run Grafana Restore') {
            steps {
                script {
                    // Define the entire restore script as a Groovy multiline string.
                    def restoreScriptContent = '''
                        #!/bin/bash
                        # 'set -e' ensures the script will exit immediately if a command fails.
                        set -e
                        # 'set -x' prints each command to the log before it is executed, useful for debugging.
                        set -x

                        # Sanity checks to ensure required tools and variables are present.
                        if [ -z "${GRAFANA_URL}" ] || [ -z "${GRAFANA_API_KEY}" ] || [ -z "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Missing required environment variables (GRAFANA_URL, GRAFANA_API_KEY, GRAFANA_BACKUP_DIR)." >&2
                            exit 1
                        fi

                        if [ ! -d "${GRAFANA_BACKUP_DIR}" ]; then
                            echo "Error: Backup directory '${GRAFANA_BACKUP_DIR}' not found." >&2
                            exit 1
                        fi
                        
                        # --- Safety Check ---
                        # This script is specifically designed to restore the 'playground_nonprd' backup.
                        if [ "$(basename "${GRAFANA_BACKUP_DIR}")" != "playground_nonprd" ]; then
                            echo "Error: This script is configured to only restore the 'playground_nonprd' directory." >&2
                            echo "The target directory is '$(basename "${GRAFANA_BACKUP_DIR}")'. Aborting." >&2
                            exit 1
                        fi

                        echo "Starting Grafana restore from local directory '${GRAFANA_BACKUP_DIR}' to ${GRAFANA_URL}"

                        # A more robust function to parse JSON values using awk.
                        extract_json_value() {
                            local json="$1"
                            local key="$2"
                            # The backslashes in the awk field separator must be escaped for Groovy.
                            echo "$json" | awk -F"[,:{}\\\\\\"]" -v key="$key" '{
                                for (i=1; i<=NF; i++) {
                                    if ($i == key) {
                                        # The value is the next non-empty field
                                        for (j=i+1; j<=NF; j++) {
                                            if ($j != "" && $j !~ /^[ \t]*$/) {
                                                print $j;
                                                exit;
                                            }
                                        }
                                    }
                                }
                            }'
                        }

                        # Use an associative array to keep track of folder IDs to avoid duplicate API calls
                        declare -A FOLDER_IDS

                        # Function to get or create a Grafana folder and return its ID
                        get_or_create_folder_id() {
                            local folder_title=$1
                            
                            if [ -n "${FOLDER_IDS[$folder_title]}" ]; then
                                echo "${FOLDER_IDS[$folder_title]}"
                                return
                            fi

                            # Search for the folder by title
                            local search_result
                            search_result=$(curl -s -H "Authorization: Bearer ${GRAFANA_API_KEY}" "${GRAFANA_URL}/api/search?type=dash-folder")
                            
                            # Process search results to find a matching folder
                            local folder_id
                            folder_id=$(echo "$search_result" | sed 's/^\\[//;s/\\]$//' | sed 's/},{/}\\n{/g' | while read -r folder_info; do
                                current_title=$(extract_json_value "$folder_info" "title")
                                if [ "$current_title" == "$folder_title" ]; then
                                    extract_json_value "$folder_info" "id"
                                    break
                                fi
                            done)

                            if [ -n "$folder_id" ]; then
                                echo "Folder '${folder_title}' already exists with ID: ${folder_id}" >&2
                            else
                                echo "Folder '${folder_title}' not found. Creating it..." >&2
                                local create_payload="{\\"title\\": \\"${folder_title}\\"}"
                                
                                local create_result
                                create_result=$(curl -s -X POST -H "Authorization: Bearer ${GRAFANA_API_KEY}" -H "Content-Type: application/json" --data "$create_payload" "${GRAFANA_URL}/api/folders")
                                
                                folder_id=$(extract_json_value "$create_result" "id")
                                
                                if [ -z "$folder_id" ]; then
                                    echo "Error: Failed to create folder '${folder_title}'. Response: ${create_result}" >&2
                                    exit 1
                                fi
                                echo "Successfully created folder '${folder_title}' with ID: ${folder_id}" >&2
                            fi
                            
                            FOLDER_IDS["$folder_title"]=$folder_id
                            echo "$folder_id"
                        }

                        # Find all dashboard JSON files in the backup directory and iterate through them
                        find "${GRAFANA_BACKUP_DIR}" -type f -name "*.json" | while read -r dashboard_path; do
                            echo "--- Processing dashboard: ${dashboard_path} ---"
                            
                            dir_path=$(dirname "${dashboard_path}")
                            folder_title=$(basename "${dir_path}")
                            
                            TARGET_FOLDER_ID=""
                            
                            # If the dashboard is in the root of the backup dir, its parent is the "playground" folder.
                            if [ "${folder_title}" == "${GRAFANA_BACKUP_DIR}" ]; then
                                TARGET_FOLDER_ID=$(get_or_create_folder_id "playground")
                            else
                                # Otherwise, the parent is a sub-folder.
                                TARGET_FOLDER_ID=$(get_or_create_folder_id "${folder_title}")
                            fi
                            
                            if [ -z "$TARGET_FOLDER_ID" ]; then
                                echo "Could not determine Folder ID for '${folder_title}'. Skipping dashboard."
                                continue
                            fi
                            
                            # Read the full JSON content from the backup file
                            full_backup_json=$(cat "${dashboard_path}")

                            # The backup file contains {"meta":{...}, "dashboard":{...}}.
                            # The restore API expects {"dashboard":{...}, "folderId":...}.
                            # This command correctly extracts the main dashboard object and removes its "id" field.
                            dashboard_object=$(echo "$full_backup_json" | sed -n 's/.*,"dashboard":\\({.*}\\)}/\\1/p' | sed 's/"id":[0-9]*,//')

                            if [ -z "$dashboard_object" ]; then
                                echo "Error: Could not extract dashboard object from '${dashboard_path}'. Skipping."
                                continue
                            fi
                            
                            # Construct the final payload by adding the folderId and overwrite keys.
                            restore_payload=$(printf '{"dashboard": %s, "folderId": %s, "overwrite": true}' "$dashboard_object" "$TARGET_FOLDER_ID")

                            restore_result=$(curl -s -X POST -H "Authorization: Bearer ${GRAFANA_API_KEY}" -H "Content-Type: application/json" --data-raw "${restore_payload}" "${GRAFANA_URL}/api/dashboards/db")

                            status=$(extract_json_value "$restore_result" "status")
                            if [ "$status" == "success" ]; then
                                echo "Successfully restored dashboard from '${dashboard_path}'"
                            else
                                echo "Error restoring dashboard from '${dashboard_path}'. Response: ${restore_result}"
                            fi
                        done

                        echo "--- Grafana restore process complete. ---"
                    '''
                    
                    // Write the script content to a file in the workspace
                    writeFile(file: 'run_grafana_restore.sh', text: restoreScriptContent)
                    // Make the file executable
                    sh 'chmod +x run_grafana_restore.sh'
                    // Execute the script explicitly with bash to ensure compatibility
                    sh 'bash ./run_grafana_restore.sh'
                }
            }
        }
    }

    // The 'post' section defines actions that run at the end of the pipeline.
    post {
        // 'always' means this action will run regardless of whether the pipeline succeeded or failed.
        always {
            // Clean up the workspace
            deleteDir()
        }
    }
}
